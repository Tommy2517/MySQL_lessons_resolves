// найти все записи:
db.users.find();

// добавить поля и значения:
db.users.insertOne({car:'BMW', model:'s3'});


// найти всех female
db.users.find({gender: 'female'})
// найти всех female и год
db.users.find({gender: 'female', age:29})

// поиск по id
db.users.find({_id:ObjectId("6424204d3474706d8189a386")})

// если хотим что бы показало запись без _id
db.users.find({gender: 'female', age:29},//что ищем
    {_id:0, age:0, gender:0} //что не хотим выводить
    );


//когда нужно произвести поиск с логическим ИЛИ
db.users.find({
    $or:[
        {rating:2},
        {rating:5},
        {age:12}
    ]
})
db.users.find({
    $and:[
        {rating:4},
        {age:12},
    ]
})

// поиск по числам которые в промежутке от и до
db.users.find({age:{$in:[25,12,16,35,19]}});
//не входят в промежуток
db.users.find({age:{$nin:[25,12,16,35,19]}});
// альтернатива ^^
db.users.find({
    age:{
        $not:{
            $in:[25,26]
        }
    }
});



////////////////////////////////////////////////////////////////////////////////////////////////////////
// поиск текста
db.users.find({name:'Natalii'})

    //регулярные выражения
// /^а/i начинается с А.
db.users.find({name:/^A/})

// заканчивается на а  "i" - убирает значимость регистра
db.users.find({name:/A$/i})

//пропуск символов в поиске (найдет имена в которых 3 буква - t)
db.users.find({name:/^.{2}t/})

//начинается на к, заканчивается на а
db.users.find({name:/^K.*a$/})

//поиск буквы не зависимо от расположения в слове
db.users.find({name:/.*a.*/i})



////////////////////////////////////////////////////////////////////////////////////////////////////////
//Сортировка
db.users.find().sort({rating:1}) //сортирует от меньшего
db.users.find().sort({rating:-1}) //сортирует от большего
//(sort)сортирует от большего, включая имена, (limit)не лоьше двух записей,(skip)пропустить первые несколько
db.users.find().sort({rating:-1, name:-1}).limit(2)


////////////////////////////////////////////////////////////////////////////////////////////////////////
// сравнение
//$gt- greater then больше чем >
db.users.find({rating:{$gt:2}})

//$lt - меньше чем <
db.users.find({rating:{$lt:3}})

//$gte- greater then больше или равно чем >=
db.users.find({rating:{$gte:2}})

//$lte - меньше или равно <=
db.users.find({rating:{$lte:3}})

// $ne - не равно !=
db.users.find({rating:{$ne:3}})

// $eq - равно ==
db.users.find({rating:{$eq:3}})




////////////////////////////////////////////////////////////////////////////////////////////////////////
//обновить данные update

//обновляет данные первого папавшегося
db.users.updateOne(
    {gender:'male'},
    {$set:{gender:'animal'}},
    )

//обновляет данные всех
db.users.updateMany(
    {gender:'animal'},
    {$set:{gender:'male'}},
    )

db.users.find()



////////////////////////////////////////////////////////////////////////////////////////////////////////
// Массивы

// поиск по количеству элементов в массиве
db.users.find({studying:{$size:2}})

//поиск по параментрам
db.users.find({parents:{$exists:0}})
//по сути аналог ^^ но если бы поле было и содержало значение null то оно нашлось бы так же
db.users.find({parents:null})

//обновить всех у кого есть поле parents
db.users.updateMany(
    {parents:{$exists:1}},
    {$set:{'parents.$[]':'Незнаю'}}
    )


//поиск по элементу внутри массива
//если в поле studing есть массив в котором есть элемент js он покажет его
db.users.find({studying:'js'});

//поиск по вложенностям в объекте
db.users.find({'address.city':'Lviv'})

//поиск в массиве по индексу 1 у которого значение java
db.users.find({'studying.1':'java'})

//добавление элементов в массив
db.users.updateOne(
    {_id:ObjectId('6424204d3474706d8189a385')},
    {$push:{studying:'Python'}}
    )


//удаление объекта
db.users.deleteOne({_id:ObjectId("6424216a3474706d8189a38f")})