
db.students.find()

db.teacher.find()
////////////////////////////////////////////////////////////////////////////////////////////////////////////
// \\\\ будем использовать агригатные выражения вместо find
//Агрегация работает дольше чем обычные команды

//первая агр. $group
db.teacher.aggregate([
    {
        $group:{
            _id:'$lesson'//по какому полю будем группировать
        }//группировать нужно всегда по id а значение ставить "$назва поля" и в value будет значение поля
    }
])

db.teacher.aggregate([
    {
        $group:{
            _id:'$lesson',
            countOfLessons: {$sum:1},// показывает сколько элементов имеют одинаковые названия
            //$sum перемножает количество одинаковых объектов на свое значение поэтому всегда ставим на 1
            min:{$min:'$payment'},//показы вает минимальное значение поля payment среди элементов которые имеют одинаковый id
            max:{$max:'$payment'},//показывает максимальное значение поля payment среди элементов которые имеют одинаковый id
            avg:{$avg:'$payment'},//среднее
            sumZP:{$sum:'$payment'},//сумма значений

        }
    }
])

////////////////////////////////////////////////////////////////////////////////////////////////////////////


db.teacher.aggregate([
    {
        $group: {
            _id: '$lesson',
            countOfLessons: {$sum: 1},
        }
    },
    {//сортирует по значению поля countOfLessons
        $sort: {
            countOfLessons: -1 //от большего к меньшему
        }
    },
    //переименование
    {
        $project:{
            //добавляем поле и назначаем значение
            lesson:'$_id', //здесь будет значение поля id уже этогообъекта
            countOfLessons:1,
            _id:0 //убираем поле


        }
    }

])


////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Скрепление.
db.teacher.aggregate([//берем таблицу учителя
    {
        $lookup:{//с помощью лукап соединяем ее с другой таблицей
            from:'students',//выбираем таблицу которую будем присоединять
            localField:'class_curator',//берем значение поля classCurator
            foreignField:'class',//присоединяем class с совпадающим classCurator
            as:'myStudents'//помещаем учеников в массив
        }
    },
    {
        // в агригатных функциях используется вместо find
        $match: {
                class_curator: { $gte:5 }//ищем поля у которых значения больше 5
            },// match лучше использовать в начале описания агригатных функций



    }
    ])

////////////////////////////////////////////////////////////////////////////////////////////////////////////
//сотировка, лимиты, пропуски
db.teacher.aggregate([//берем таблицу учителя
    {
        // в агригатных функциях используется вместо find
        $match: {
            class_curator: { $gte:5 }//обтираем поля у которых значения больше 5
        }
    },
    {
        $lookup:{//с помощью лукап соединяем ее с другой таблицей
            from:'students',//выбираем таблицу которую будем присоединять
            localField:'class_curator',//берем значение поля classCurator
            foreignField:'class',//присоединяем class с совпадающим classCurator
            as:'myStudents'//помещаем учеников в массив
        }
    },
    {
        $sort:{
            class_curator:1 //сортируем от меньшего к польшему по значению поля class_curator
        }
    },
    {
        $limit:2 //ограничиваем получаемое число бъектов до 2
    },
    {
        $skip:2 //пропускаем 2 объекта с начала списка
    }
])


////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Агригатный поиск
db.teacher.aggregate([//берем таблицу учителя
    // {
    //     // в агригатных функциях используется вместо find
    //     $match: {
    //         class_curator: { $gte:5 }//обтираем поля у которых значения больше 5
    //     }
    // },
    {
        $lookup:{//с помощью лукап соединяем ее с другой таблицей
            from:'students',//выбираем таблицу которую будем присоединять
            localField:'class_curator',//берем значение поля classCurator
            foreignField:'class',//присоединяем class с совпадающим classCurator
            as:'myStudents'//помещаем учеников в массив
        }
    },
    {
        $sort:{
            class_curator:1 //сортируем от меньшего к польшему по значению поля class_curator
        }
    },
    // {
    //     $match:{
    //         'myStudents.parents.name': 'Ira'
    //     }// находит учителей, у которых есть ученик, у которого есть родитель с именем Ira
    // }

])

////////////////////////////////////////////////////////////////////////////////////////////////////////////
// unwind раскладывает массив на отдельные объекты

db.teacher.aggregate([
    {
        $lookup:{//с помощью лукап соединяем ее с другой таблицей
            from:'students',//выбираем таблицу которую будем присоединять
            localField:'class_curator',//берем значение поля classCurator
            foreignField:'class',//присоединяем class с совпадающим classCurator
            as:'myStudents'//помещаем учеников в массив
        }
    },
    {
        //был объект с массивом х.у[а,б,в]
        //стало 3 объекта [х.а, х.б, х.в]
        $unwind: '$myStudents'//выбираем поле с массивом которое ходит разделить на объекты
    },
    {
        $unwind: '$myStudents.parents'
    },
    {
        $match: {'myStudents.parents.profession':'doctor'}
    },
    {
        $count: "doctorCount" //получаем количество объектов подходящих по описанию выше
    }
])
